geom_line(data = isoquant_data, aes(x = v1, y = v2), color = "blue", size = 1, linetype = "solid", label="Isoquant") +
geom_line(data = line_data, aes(x = v1, y = v2), color = "red", size = 1, linetype = "dashed", label="Cost Line") +
geom_point(aes(x = intersection_v1, y = intersection_v2), color = "black", size = 3) +
annotate("text", x = intersection_v1 + 10, y = intersection_v2 + 5,
label = paste0("Intersection: (", intersection_v1, ", ", intersection_v2, ")"),
color = "black") +
labs(title = "Isoquant and Cost Line Intersection",
x = expression(v[1]),
y = expression(v[2])) +
theme_minimal()
# 加载必要的库
library(ggplot2)
# 定义数据
v1_values <- seq(10, 200, length.out = 100) # v1 的值范围
v2_values_isoquant <- 2500 / v1_values      # Isoquant 方程 v2 = 2500 / v1
# 创建数据框
isoquant_data <- data.frame(v1 = v1_values, v2 = v2_values_isoquant)
# 定义直线方程 600 = 2v1 + 18v2 -> v2 = (600 - 2*v1) / 18
v1_line <- seq(10, 200, length.out = 100)
v2_line <- (600 - 2 * v1_line) / 18
line_data <- data.frame(v1 = v1_line, v2 = v2_line)
# 找到交点
intersection_v1 <- 150
intersection_v2 <- 16.67
# 绘制图形
ggplot() +
geom_line(data = isoquant_data, aes(x = v1, y = v2), color = "blue", size = 1, linetype = "solid", label="Isoquant") +
geom_line(data = line_data, aes(x = v1, y = v2), color = "red", size = 1, linetype = "dashed", label="Cost Line") +
geom_point(aes(x = intersection_v1, y = intersection_v2), color = "black", size = 3) +
annotate("text", x = intersection_v1 + 10, y = intersection_v2 + 5),
# 加载必要的库
library(ggplot2)
# 定义数据
v1_values <- seq(10, 200, length.out = 100) # v1 的值范围
v2_values_isoquant <- 2500 / v1_values      # Isoquant 方程 v2 = 2500 / v1
# 创建数据框
isoquant_data <- data.frame(v1 = v1_values, v2 = v2_values_isoquant)
# 定义直线方程 600 = 2v1 + 18v2 -> v2 = (600 - 2*v1) / 18
v1_line <- seq(10, 200, length.out = 100)
v2_line <- (600 - 2 * v1_line) / 18
line_data <- data.frame(v1 = v1_line, v2 = v2_line)
# 找到交点
intersection_v1 <- 150
intersection_v2 <- 16.67
# 绘制图形
ggplot() +
geom_line(data = isoquant_data, aes(x = v1, y = v2), color = "blue", size = 1, linetype = "solid", label="Isoquant") +
geom_line(data = line_data, aes(x = v1, y = v2), color = "red", size = 1, linetype = "dashed", label="Cost Line") +
geom_point(aes(x = intersection_v1, y = intersection_v2), color = "black", size = 3) +
annotate("text", x = intersection_v1 + 10, y = intersection_v2 + 5,
label = paste0("Intersection: (", intersection_v1, ", ", intersection_v2, ")"),
color = "black") +
labs(title = "Isoquant and Cost Line Intersection",
x = expression(v[1]),
y = expression(v[2])) +
theme_minimal()
# 加载必要的库
library(ggplot2)
# 定义数据
v1_values <- seq(10, 200, length.out = 100) # v1 的值范围
v2_values_isoquant <- 2500 / v1_values      # Isoquant 方程 v2 = 2500 / v1
# 创建数据框
isoquant_data <- data.frame(v1 = v1_values, v2 = v2_values_isoquant)
# 定义直线方程 600 = 2v1 + 18v2 -> v2 = (600 - 2*v1) / 18
v1_line <- seq(10, 200, length.out = 100)
v2_line <- (600 - 2 * v1_line) / 18
line_data <- data.frame(v1 = v1_line, v2 = v2_line)
# 找到交点
intersection_v1 <- 150
intersection_v2 <- 16.67
# 绘制图形
ggplot() +
geom_line(data = isoquant_data, aes(x = v1, y = v2), color = "blue", size = 1, linetype = "solid") +
geom_line(data = line_data, aes(x = v1, y = v2), color = "red", size = 1, linetype = "dashed") +
geom_point(aes(x = intersection_v1, y = intersection_v2), color = "black", size = 3) +
annotate("text", x = intersection_v1 + 10, y = intersection_v2 + 5,
label = paste0("Intersection: (", intersection_v1, ", ", intersection_v2, ")"),
color = "black") +
labs(title = "Isoquant and Cost Line Intersection",
x = expression(v[1]),
y = expression(v[2])) +
theme_minimal()
# 加载必要的库
library(ggplot2)
# 定义数据
v1_values <- seq(10, 200, length.out = 100) # v1 的值范围
v2_values_isoquant <- 2500 / v1_values      # Isoquant 方程 v2 = 2500 / v1
# 创建数据框
isoquant_data <- data.frame(v1 = v1_values, v2 = v2_values_isoquant)
# 定义直线方程 600 = 2v1 + 18v2 -> v2 = (600 - 2*v1) / 18
v1_line <- seq(10, 200, length.out = 100)
v2_line <- (600 - 2 * v1_line) / 18
line_data <- data.frame(v1 = v1_line, v2 = v2_line)
# 找到交点
intersection_v1 <- 150
intersection_v2 <- 16.67
# 绘制图形
ggplot() +
geom_line(data = isoquant_data, aes(x = v1, y = v2), color = "blue", size = 1, linetype = "solid") +
geom_line(data = line_data, aes(x = v1, y = v2), color = "red", size = 1, linetype = "solid") +
geom_point(aes(x = intersection_v1, y = intersection_v2), color = "black", size = 3) +
annotate("text", x = intersection_v1 + 10, y = intersection_v2 + 5,
label = paste0("Intersection: (", intersection_v1, ", ", intersection_v2, ")"),
color = "black") +
labs(title = "Isoquant and Cost Line Intersection",
x = expression(v[1]),
y = expression(v[2])) +
theme_minimal()
# 加载必要的库
library(ggplot2)
# 定义分段函数
piecewise_function <- function(x) {
ifelse(x < 6, 90000 - 15000 * x, 1)
}
# 创建x值
x_values <- seq(0, 6, length.out = 400)
# 计算y值
y_values <- sapply(x_values, piecewise_function)
# 创建数据框
data <- data.frame(x = x_values, y = y_values)
# 绘制图形
ggplot(data, aes(x = x, y = y)) +
geom_line(color = "blue") +
geom_point(aes(x = 6, y = 1), color = "red", size = 3) +
labs(title = "Piecewise Function Plot", x = "x", y = "y") +
theme_minimal() +
geom_vline(xintercept=6, color='gray', linetype='dashed') +
annotate("text", x = 5.5, y = 20, label = "y = 90000 - 15000x for x in [0, 6)", color="blue") +
annotate("text", x
# 加载必要的库
library(ggplot2)
# 定义分段函数
piecewise_function <- function(x) {
ifelse(x < 6, 90000 - 15000 * x, 1)
}
# 创建x值
x_values <- seq(0, 6, length.out = 400)
# 计算y值
y_values <- sapply(x_values, piecewise_function)
# 创建数据框
data <- data.frame(x = x_values, y = y_values)
# 绘制图形
ggplot(data, aes(x = x, y = y)) +
geom_line(color = "blue") +
geom_point(aes(x = 6, y = 1), color = "red", size = 3) +
labs(title = "Piecewise Function Plot", x = "x", y = "y") +
theme_minimal() +
geom_vline(xintercept=6, color='gray', linetype='dashed') +
annotate("text", x = 5.5, y = 20000, label = "y = 90000 - 15000x for x in [0, 6)", color="blue") +
annotate("text", x = 6.5, y = 1.5, label = "y = 1 at x = 6", color="red")
# 加载必要的库
library(ggplot2)
# 定义分段函数
piecewise_function <- function(x) {
if (x < 3) {
return(90000 * (1 - 0.3)^x)
} else if (x < 6) {
return(33075 - 11025 * x)
} else {
return(1)
}
}
# 创建 x 值范围
x_values <- seq(0, 6, length.out = 400)
# 计算 y 值
y_values <- sapply(x_values, piecewise_function)
# 创建数据框
data <- data.frame(x = x_values, y = y_values)
# 绘制图形
ggplot(data, aes(x = x, y = y)) +
geom_line(color = "blue", size = 1) + # 绘制分段函数曲线
geom_point(aes(x = 6, y = 1), color = "red", size = 3) + # 标记点 (6,1)
geom_vline(xintercept = 6, color = "gray", linetype = "dashed") + # 添加垂直虚线
labs(title = "Piecewise Function Plot",
x = "x",
y = "y") +
annotate("text", x = 1.5, y = 70000,
label = "y = 90000 * (1-30%)^x for x in [0,3)", color = "blue") +
annotate("text", x = 4.5, y = -10000,
label = "y = 33075 - 11025x for x in [3,6)", color = "blue") +
annotate("text", x = 6.5, y = 5,
label = "y = 1 at x=6", color = "red") +
theme_minimal()
# 加载必要的库
library(ggplot2)
# 定义分段函数
piecewise_function <- function(x) {
if (x < 3) {
return(90000 * (1 - 0.3)^x)
} else if (x < 6) {
return(33075 - 11025 * x)
} else {
return(1)
}
}
# 创建 x 值范围
x_values <- seq(0, 6, length.out = 400)
# 计算 y 值
y_values <- sapply(x_values, piecewise_function)
# 创建数据框
data <- data.frame(x = x_values, y = y_values)
# 绘制图形
ggplot(data, aes(x = x, y = y)) +
geom_line(color = "blue", size = 1) + # 绘制分段函数曲线
geom_point(aes(x = 6, y = 1), color = "red", size = 3) + # 标记点 (6,1)
geom_vline(xintercept = 6, color = "gray", linetype = "dashed") + # 添加垂直虚线
labs(title = "Piecewise Function Plot",
x = "x",
y = "y") +
annotate("text", x = 1.5, y = 70000,
label = "y = 90000 * (1-30%)^x for x in [0,3)", color = "blue") +
annotate("text", x = 4.5, y = 0,
label = "y = 33075 - 11025x for x in [3,6)", color = "blue") +
annotate("text", x = 6.5, y = 5,
label = "y = 1 at x=6", color = "red") +
theme_minimal()
# 加载必要的库
library(ggplot2)
# 定义分段函数
piecewise_function <- function(x) {
if (x < 3) {
return(90000 * (1 - 0.3)^x)
} else if (x < 6) {
return(33075 - 11025 * x)
} else {
return(1)
}
}
# 创建 x 值范围
x_values <- seq(0, 6, length.out = 400)
# 计算 y 值
y_values <- sapply(x_values, piecewise_function)
# 创建数据框
data <- data.frame(x = x_values, y = y_values)
# 绘制图形
ggplot(data, aes(x = x, y = y)) +
geom_line(color = "blue", size = 1) + # 绘制分段函数曲线
geom_point(aes(x = 6, y = 1), color = "red", size = 3) + # 标记点 (6,1)
geom_vline(xintercept = 6, color = "gray", linetype = "dashed") + # 添加垂直虚线
labs(title = "Piecewise Function Plot",
x = "x",
y = "y") +
annotate("text", x = 1.5, y = 70000,
label = "y = 90000 * (1-30%)^x for x in [0,3)", color = "blue") +
annotate("text", x = 4.5, y = 0,
label = "y = 33075 - 11025x for x in [3,6)", color = "blue") +
annotate("text", x = 6.5, y = 5,
label = "y = 1 at x=6", color = "red") +
theme_minimal()
# 加载必要的库
library(ggplot2)
# 定义分段函数
piecewise_function <- function(x) {
if (x < 3) {
return(90000 * (1 - 0.3)^x)
} else if (x < 6) {
return(90000 - 11025 * x)
} else {
return(1)
}
}
# 创建 x 值范围
x_values <- seq(0, 6, length.out = 400)
# 计算 y 值
y_values <- sapply(x_values, piecewise_function)
# 创建数据框
data <- data.frame(x = x_values, y = y_values)
# 绘制图形
ggplot(data, aes(x = x, y = y)) +
geom_line(color = "blue", size = 1) + # 绘制分段函数曲线
geom_point(aes(x = 6, y = 1), color = "red", size = 3) + # 标记点 (6,1)
geom_vline(xintercept = 6, color = "gray", linetype = "dashed") + # 添加垂直虚线
labs(title = "Piecewise Function Plot",
x = "x",
y = "y") +
annotate("text", x = 1.5, y = 70000,
label = "y = 90000 * (1-30%)^x for x in [0,3)", color = "blue") +
annotate("text", x = 4.5, y = -10000,
label = "y = 33075 - 11025x for x in [3,6)", color = "blue") +
annotate("text", x = 6.5, y = 5,
label = "y = 1 at x=6", color = "red") +
theme_minimal()
# 加载必要的库
library(ggplot2)
# 定义分段函数
piecewise_function <- function(x) {
if (x < 3) {
return(90000 * (1 - 0.3)^x)
} else if (x < 6) {
return(33075*2 - 11025 * x)
} else {
return(1)
}
}
# 创建 x 值范围
x_values <- seq(0, 6, length.out = 400)
# 计算 y 值
y_values <- sapply(x_values, piecewise_function)
# 创建数据框
data <- data.frame(x = x_values, y = y_values)
# 绘制图形
ggplot(data, aes(x = x, y = y)) +
geom_line(color = "blue", size = 1) + # 绘制分段函数曲线
geom_point(aes(x = 6, y = 1), color = "red", size = 3) + # 标记点 (6,1)
geom_vline(xintercept = 6, color = "gray", linetype = "dashed") + # 添加垂直虚线
labs(title = "Piecewise Function Plot",
x = "x",
y = "y") +
annotate("text", x = 1.5, y = 70000,
label = "y = 90000 * (1-30%)^x for x in [0,3)", color = "blue") +
annotate("text", x = 4.5, y = -10000,
label = "y = 33075 - 11025x for x in [3,6)", color = "blue") +
annotate("text", x = 6.5, y = 5,
label = "y = 1 at x=6", color = "red") +
theme_minimal()
# 加载必要的库
library(ggplot2)
# 定义分段函数
piecewise_function <- function(x) {
if (x < 3) {
return(90000 * (1 - 0.3)^x)
} else if (x < 6) {
return(33075*2 - 11025 * x)
} else {
return(1)
}
}
# 创建 x 值范围
x_values <- seq(0, 6, length.out = 400)
# 计算 y 值
y_values <- sapply(x_values, piecewise_function)
# 创建数据框
data <- data.frame(x = x_values, y = y_values)
# 绘制图形
ggplot(data, aes(x = x, y = y)) +
geom_line(color = "blue", size = 1) + # 绘制分段函数曲线
geom_point(aes(x = 6, y = 1), color = "red", size = 3) + # 标记点 (6,1)
geom_vline(xintercept = 6, color = "gray", linetype = "dashed") + # 添加垂直虚线
labs(title = "Piecewise Function Plot",
x = "x",
y = "y") +
annotate("text", x = 1.5, y = 70000,
label = "y = 90000 * (1-30%)^x for x in [0,3)", color = "blue") +
annotate("text", x = 4.5, y = -10000,
label = "y = 33075 - 11025x for x in [3,6)", color = "blue") +
annotate("text", x = 6.5, y = 5,
label = "y = 1 at x=6", color = "red") +
theme_minimal()
# 加载必要的库
library(ggplot2)
# 定义分段函数
piecewise_function <- function(x) {
if (x < 3) {
return(90000 * (1 - 0.3)^x)
} else if (x < 6) {
return(90000 * (1 - 0.3)^3 - 11025 * x)
} else {
return(1)
}
}
# 创建 x 值范围
x_values <- seq(0, 6, length.out = 400)
# 计算 y 值
y_values <- sapply(x_values, piecewise_function)
# 创建数据框
data <- data.frame(x = x_values, y = y_values)
# 绘制图形
ggplot(data, aes(x = x, y = y)) +
geom_line(color = "blue", size = 1) + # 绘制分段函数曲线
geom_point(aes(x = 6, y = 1), color = "red", size = 3) + # 标记点 (6,1)
geom_vline(xintercept = 6, color = "gray", linetype = "dashed") + # 添加垂直虚线
labs(title = "Piecewise Function Plot",
x = "x",
y = "y") +
annotate("text", x = 1.5, y = 70000,
label = "y = 90000 * (1-30%)^x for x in [0,3)", color = "blue") +
annotate("text", x = 4.5, y = -10000,
label = "y = 33075 - 11025x for x in [3,6)", color = "blue") +
annotate("text", x = 6.5, y = 5,
label = "y = 1 at x=6", color = "red") +
theme_minimal()
# 加载必要的库
library(ggplot2)
# 定义分段函数
piecewise_function <- function(x) {
if (x < 3) {
return(90000 * (1 - 0.3)^x)
} else if (x < 6) {
return(66150 - 11025 * x)
} else {
return(1)
}
}
# 创建 x 值范围
x_values <- seq(0, 6, length.out = 400)
# 计算 y 值
y_values <- sapply(x_values, piecewise_function)
# 创建数据框
data <- data.frame(x = x_values, y = y_values)
# 绘制图形
ggplot(data, aes(x = x, y = y)) +
geom_line(color = "blue", size = 1) + # 绘制分段函数曲线
geom_point(aes(x = 6, y = 1), color = "red", size = 3) + # 标记点 (6,1)
geom_vline(xintercept = 6, color = "gray", linetype = "dashed") + # 添加垂直虚线
labs(title = "Piecewise Function Plot",
x = "x",
y = "y") +
annotate("text", x = 1.5, y = 70000,
label = "y = 90000 * (1-30%)^x for x in [0,3)", color = "blue") +
annotate("text", x = 4.5, y = -10000,
label = "y = 33075 - 11025x for x in [3,6)", color = "blue") +
annotate("text", x = 6.5, y = 5,
label = "y = 1 at x=6", color = "red") +
theme_minimal()
library(DiagrammeR)
mermaid("
graph TD;
Markt--Nachfrager-->1[Faktormarkt / Business to Business];
Markt--Nachfrager-->2[Konsumgütermarkt / Business to Consumer];
Markt--Wohlstand der Marktteilnehmer-->3[Arm]
Markt--Wohlstand der Marktteilnehmer-->4[Reich]
")
library(DiagrammeR)
mermaid("
graph TD
A[Produktionsfaktoren nach Gutenberg]
A --> B[Arbeit]
A --> C[Kapital]
B --> D[Leitende Arbeit]
B --> E[Ausführende Arbeit]
D --> F[Leitung]
D --> G[Planung]
D --> H[Organisation]
D --> I[Kontrolle]
E -..-> J[z.B. Elektriker]
E -..-> K[z.B. Buchhalter]
E -..-> L[z.B. Verkäuferin]
C --> M[Realkapital]
C --> T[Finanz]
M --> N[Betriebsmittel]
M --> O[Werkstoffe]
N --> V[Grundstücke und Gebäude]
N --> X[Maschinen und Anlage]
N --> Y[Fahrzeuge]
N --> Z[BGA]
O --> Q[Rohstoffe]
O --> R[Hilfsstoffe]
O --> S[Betriebsstoffe]
U[Elementarfaktoren] --> E
U --> N
U --> O
")
library(DiagrammeR)
mermaid("
graph TD;
A[Produktionsfaktoren nach Gutenberg];
A --> B[Arbeit];
A --> C[Kapital];
B --> D[Leitende Arbeit];
B --> E[Ausführende Arbeit];
D --> F[Leitung];
D --> G[Planung];
D --> H[Organisation];
D --> I[Kontrolle];
E -..-> J[z.B. Elektriker];
E -..-> K[z.B. Buchhalter];
E -..-> L[z.B. Verkäuferin];
C --> M[Realkapital];
C --> T[Finanz];
M --> N[Betriebsmittel];
M --> O[Werkstoffe];
N --> V[Grundstücke und Gebäude];
N --> X[Maschinen und Anlage];
N --> Y[Fahrzeuge];
N --> Z[BGA];
O --> Q[Rohstoffe];
O --> R[Hilfsstoffe];
O --> S[Betriebsstoffe];
U[Elementarfaktoren] --> E;
U --> N;
U --> O;
")
library(DiagrammeR)
mermaid("
graph TD;
A[Produktionsfaktoren nach Gutenberg];
A --> B[Arbeit];
A --> C[Kapital];
B --> D[Leitende Arbeit];
B --> E[Ausführende Arbeit];
D --> F[Leitung];
D --> G[Planung];
D --> H[Organisation];
D --> I[Kontrolle];
E -..-> J[z.B. Elektriker];
E -..-> K[z.B. Buchhalter];
E -..-> L[z.B. Verkäuferin];
C --> M[Realkapital];
C --> T[Finanz];
M --> N[Betriebsmittel];
M --> O[Werkstoffe];
N --> V[Grundstücke und Gebäude];
N --> X[Maschinen und Anlage];
N --> Y[Fahrzeuge];
N --> Z[BGA];
O --> Q[Rohstoffe];
O --> R[Hilfsstoffe];
O --> S[Betriebsstoffe];
U[Elementarfaktoren] --> E;
U --> N;
U --> O;
")
